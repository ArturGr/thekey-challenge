import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { fetchPosts, Post } from './postsAPI';

export interface PostsState {
  posts: Record<string, Post>;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: PostsState = {
  posts: {},
  status: 'idle',
};

export const fetchAllPosts = createAsyncThunk(
  'posts/fetchPosts',
  async () => {
    const response = await fetchPosts();
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

const handleInsertPosts = (state: PostsState, action: PayloadAction<Post[] | undefined>) => {
  (action.payload ?? []).forEach(post => {
    state.posts[post.id] = post
  })
}

export const postsSlice = createSlice({
  name: 'postWordsCounter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    insertPosts: handleInsertPosts,
    insertPost: (state, action: PayloadAction<Post>) => {
      state.posts[action.payload.id] = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAllPosts.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAllPosts.fulfilled, handleInsertPosts)
      .addCase(fetchAllPosts.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { insertPosts, insertPost } = postsSlice.actions;

export const selectAllPost = (state: RootState) => state.posts.posts;
export const selectPostById = (state: RootState, id: string) =>
  state.posts.posts[id]


export default postsSlice.reducer;
